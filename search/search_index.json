{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Placeholder API It's a small, jij-able API that allows creation and parsing placeholders within strings and Minecraft Text Components. Placeholders use simple format of %modid:type% or %modid:type data% ( %modid:type/data% before 1.19). It also includes simple, general usage text format indented for simplifying user input in configs/chats/etc. For users It allows users to configure multiple mods in similar way without losing compatibility between mods. Placeholders allow changing what and where any information is present within compatible mods. Additionally, Simplified Text Format allows to style them in readable way without requirement of writing JSON manually or using generators. Using placeholders Default placeholder list Mod placeholder list Simplified Text Format For developers Usage of Placeholder API is a simple way to achieve good mod compatibility without having to implement multiple mod specific apis. Additionally, the placeholder parsing system can be used for replacing own static (or dynamic placeholders) in Text created by player or read from config. This with combination of Simplified Text Format allows creating great user/admin experience. Getting Started Adding placeholders Parsing placeholders Using Simplified Text Format/TextParser","title":"About Placeholder API"},{"location":"#about-placeholder-api","text":"It's a small, jij-able API that allows creation and parsing placeholders within strings and Minecraft Text Components. Placeholders use simple format of %modid:type% or %modid:type data% ( %modid:type/data% before 1.19). It also includes simple, general usage text format indented for simplifying user input in configs/chats/etc.","title":"About Placeholder API"},{"location":"#for-users","text":"It allows users to configure multiple mods in similar way without losing compatibility between mods. Placeholders allow changing what and where any information is present within compatible mods. Additionally, Simplified Text Format allows to style them in readable way without requirement of writing JSON manually or using generators. Using placeholders Default placeholder list Mod placeholder list Simplified Text Format","title":"For users"},{"location":"#for-developers","text":"Usage of Placeholder API is a simple way to achieve good mod compatibility without having to implement multiple mod specific apis. Additionally, the placeholder parsing system can be used for replacing own static (or dynamic placeholders) in Text created by player or read from config. This with combination of Simplified Text Format allows creating great user/admin experience. Getting Started Adding placeholders Parsing placeholders Using Simplified Text Format/TextParser","title":"For developers"},{"location":"dev/adding-placeholders/","text":"Adding placeholders Creation of new placeholders is simple. You just need to import eu.pb4.placeholders.api.Placeholders and call static register method. You only need to provide 2 arguments: Identifier with your mod id as namespace and path as argument name (with one additional limitation being not allowed to use / in it). A function (in form of lambda for example) that takes PlaceholderContext and nullable string argument, returns PlaceholderResult, Example Placeholders.register( new Identifier(\"example\", \"placeholder\"), (ctx, arg) -> PlaceholderResult.value(new LiteralText(\"Hello World!\")) ); Using the context PlaceholderContext object passed to placeholder contains allows getting player (if exist), server and argument value. It also includes few methods for checking if they are present. Here is example for player only placeholder Placeholders.register(new Identifier(\"player\", \"displayname\"), (ctx, arg) -> { if (ctx.hasPlayer()) { return PlaceholderResult.value(ctx.getPlayer().getDisplayName()); } else { return PlaceholderResult.invalid(\"No player!\"); } }); You can also add an argument to your placeholder, which removes requirement of mostly repeated placeholders and allows degree of customisation. Argument itself is a string, so you can parse it in any way. PlaceholderAPI.register(new Identifier(\"server\", \"name_from_uuid\"), (ctx, arg) -> { if (arg != null) { return PlaceholderResult.value(ctx.server().getUserCache().getByUuid(UUID.fromString(arg)).get().getName())); } else { return PlaceholderResult.invalid(\"No argument!\"); } }); Returning correct value Placeholders need to return instance of PlaceholderResult. It can be created by usage of provided static methods on this class. If it was successful: PlaceholderResult.value(Text text) - Creates a value with text PlaceholderResult.value(String text) - Creates a value from string, by parsing it with TextParser If it was invalid (no player or argument for example): PlaceholderResult.invalid() - Creates simple invalid result PlaceholderResult.invalid(String reason) - Creates invalid result with a reason, which is currently unused, but can be implemented by other parsers","title":"Adding placeholders"},{"location":"dev/adding-placeholders/#adding-placeholders","text":"Creation of new placeholders is simple. You just need to import eu.pb4.placeholders.api.Placeholders and call static register method. You only need to provide 2 arguments: Identifier with your mod id as namespace and path as argument name (with one additional limitation being not allowed to use / in it). A function (in form of lambda for example) that takes PlaceholderContext and nullable string argument, returns PlaceholderResult, Example Placeholders.register( new Identifier(\"example\", \"placeholder\"), (ctx, arg) -> PlaceholderResult.value(new LiteralText(\"Hello World!\")) );","title":"Adding placeholders"},{"location":"dev/adding-placeholders/#using-the-context","text":"PlaceholderContext object passed to placeholder contains allows getting player (if exist), server and argument value. It also includes few methods for checking if they are present. Here is example for player only placeholder Placeholders.register(new Identifier(\"player\", \"displayname\"), (ctx, arg) -> { if (ctx.hasPlayer()) { return PlaceholderResult.value(ctx.getPlayer().getDisplayName()); } else { return PlaceholderResult.invalid(\"No player!\"); } }); You can also add an argument to your placeholder, which removes requirement of mostly repeated placeholders and allows degree of customisation. Argument itself is a string, so you can parse it in any way. PlaceholderAPI.register(new Identifier(\"server\", \"name_from_uuid\"), (ctx, arg) -> { if (arg != null) { return PlaceholderResult.value(ctx.server().getUserCache().getByUuid(UUID.fromString(arg)).get().getName())); } else { return PlaceholderResult.invalid(\"No argument!\"); } });","title":"Using the context"},{"location":"dev/adding-placeholders/#returning-correct-value","text":"Placeholders need to return instance of PlaceholderResult. It can be created by usage of provided static methods on this class. If it was successful: PlaceholderResult.value(Text text) - Creates a value with text PlaceholderResult.value(String text) - Creates a value from string, by parsing it with TextParser If it was invalid (no player or argument for example): PlaceholderResult.invalid() - Creates simple invalid result PlaceholderResult.invalid(String reason) - Creates invalid result with a reason, which is currently unused, but can be implemented by other parsers","title":"Returning correct value"},{"location":"dev/getting-started/","text":"Getting Started To begin, you need to add Nucleoid's maven to your build build.gradle . repositories { // There might be other repos there too, just add it at the end maven { url \"https://maven.nucleoid.xyz/\" } } Then you just declare it as dependency! dependencies { // You will have other dependencies here too modImplementation include(\"eu.pb4:placeholder-api:[VERSION]\") } This will also include it in yours mods, so users won't need to download it separately. You just need to replace [VERSION] with version you want to use (which should be usually the latest available). For list of version names, you can check maven","title":"Getting Started"},{"location":"dev/getting-started/#getting-started","text":"To begin, you need to add Nucleoid's maven to your build build.gradle . repositories { // There might be other repos there too, just add it at the end maven { url \"https://maven.nucleoid.xyz/\" } } Then you just declare it as dependency! dependencies { // You will have other dependencies here too modImplementation include(\"eu.pb4:placeholder-api:[VERSION]\") } This will also include it in yours mods, so users won't need to download it separately. You just need to replace [VERSION] with version you want to use (which should be usually the latest available). For list of version names, you can check maven","title":"Getting Started"},{"location":"dev/parsing-placeholders/","text":"Parsing placeholders There are few ways (and types) of placeholders you can parse with PlaceholderAPI. So depending on your use case some of these will be more useful than others. Parsing global placeholders Parsing global placeholders is really simple, as long as you have access to ServerPlayerEntity or MinecraftServer object. You just need to simply import eu.pb4.placeholders.api.Placeholders and call parseText . This method will return fully parsed Text, which can be displayed to the user. Example Text message = Placeholders.parseText(textInput, PlaceholderContext.of(...)); Placeholders itself will use default formatting of %category:placeholder% . If you want to use other formatting for them (which is recommended), you can use parseText(Text, PlaceholderContext) for {category:placeholder} . Parsing own/custom/predefined placeholders If you want to parse your own placeholders, you can do this in 2 ways. Static placeholders To parse static placeholders you need to create a Map with String as a key and Text as a value. You also need a Pattern object (which can be taken from predefined ones). Then it's as simple as calling a parsePredefinedText static method on PlaceholderAPI class. Example ServerPlayerEntity player = something.getPlayer(); // MinecraftServer server = something.getServer() Text inputText = Text.literal(\"Hello! ${player}\"); Map<String, Text> placeholders = Map.of(\"player\", Text.literal(\"You are a player!\")); Pattern pattern = Placeholders.PREDEFINED_PLACEHOLDER_PATTERN; Text output = Placeholders.parseText(inputText, pattern, placeholders); Dynamic placeholders In case where you want to parse placeholder with a context similar to global one, you need to create a Map with Identifier as a key and PlaceholderHandler as a value (same as adding global ones). You also will need a pattern object, which is the same as with static ones. As opposite to global ones, you don't need to define namespace/category as it can default to minecraft one (for simpler user input). Then you just parse it with parseText(Text, PlaceholderContext, Pattern, PlaceholderGetter) . Example ServerPlayerEntity player = something.getPlayer(); // MinecraftServer server = something.getServer() Text inputText = new Text.literal(\"Hello! ${player blue}\"); PlaceholderGetter placeholders = (id) -> switch { case \"player\" -> (ctx) -> { if (ctx.hasPlayer()) { return PlaceholderResult.value(Text.literal(\"You are a player!\") .setStyle(Style.EMPTY.withColor(TextColor.parse(ctx.getArgument())))); } else { return PlaceholderResult.value(Text.literal(\"You are a server!\") .setStyle(Style.EMPTY.withColor(TextColor.parse(ctx.getArgument())))); } }); } Pattern pattern = Placeholders.PREDEFINED_PLACEHOLDER_PATTERN; Text output = Placeholders.parseText(inputText, PlaceholderContext.of(player), pattern, placeholders); Preferred Patterns for static PlaceholderAPI has few Patterns you can use, which are accessible as static objects on Placeholders class. PREDEFINED_PLACEHOLDER_PATTERN ( ${placeholder} ) - works the best in most cases, doesn't collide with other ones. ALT_PLACEHOLDER_PATTERN_CUSTOM ( {placeholder} ) - second best, but have more chance of colliding with user formatting. There are other ones, which usage is allowed, but they might work worse. PLACEHOLDER_PATTERN_CUSTOM ( %placeholder% ) - is the same as default one, but doesn't require : . PLACEHOLDER_PATTERN ( %category:placeholder% ) - used by default global placeholders (requires category). PLACEHOLDER_PATTERN_ALT ( {category:placeholder} ) - used as alternative formatting for global ones (requires category).","title":"Parsing placeholders"},{"location":"dev/parsing-placeholders/#parsing-placeholders","text":"There are few ways (and types) of placeholders you can parse with PlaceholderAPI. So depending on your use case some of these will be more useful than others.","title":"Parsing placeholders"},{"location":"dev/parsing-placeholders/#parsing-global-placeholders","text":"Parsing global placeholders is really simple, as long as you have access to ServerPlayerEntity or MinecraftServer object. You just need to simply import eu.pb4.placeholders.api.Placeholders and call parseText . This method will return fully parsed Text, which can be displayed to the user. Example Text message = Placeholders.parseText(textInput, PlaceholderContext.of(...)); Placeholders itself will use default formatting of %category:placeholder% . If you want to use other formatting for them (which is recommended), you can use parseText(Text, PlaceholderContext) for {category:placeholder} .","title":"Parsing global placeholders"},{"location":"dev/parsing-placeholders/#parsing-owncustompredefined-placeholders","text":"If you want to parse your own placeholders, you can do this in 2 ways.","title":"Parsing own/custom/predefined placeholders"},{"location":"dev/parsing-placeholders/#static-placeholders","text":"To parse static placeholders you need to create a Map with String as a key and Text as a value. You also need a Pattern object (which can be taken from predefined ones). Then it's as simple as calling a parsePredefinedText static method on PlaceholderAPI class. Example ServerPlayerEntity player = something.getPlayer(); // MinecraftServer server = something.getServer() Text inputText = Text.literal(\"Hello! ${player}\"); Map<String, Text> placeholders = Map.of(\"player\", Text.literal(\"You are a player!\")); Pattern pattern = Placeholders.PREDEFINED_PLACEHOLDER_PATTERN; Text output = Placeholders.parseText(inputText, pattern, placeholders);","title":"Static placeholders"},{"location":"dev/parsing-placeholders/#dynamic-placeholders","text":"In case where you want to parse placeholder with a context similar to global one, you need to create a Map with Identifier as a key and PlaceholderHandler as a value (same as adding global ones). You also will need a pattern object, which is the same as with static ones. As opposite to global ones, you don't need to define namespace/category as it can default to minecraft one (for simpler user input). Then you just parse it with parseText(Text, PlaceholderContext, Pattern, PlaceholderGetter) . Example ServerPlayerEntity player = something.getPlayer(); // MinecraftServer server = something.getServer() Text inputText = new Text.literal(\"Hello! ${player blue}\"); PlaceholderGetter placeholders = (id) -> switch { case \"player\" -> (ctx) -> { if (ctx.hasPlayer()) { return PlaceholderResult.value(Text.literal(\"You are a player!\") .setStyle(Style.EMPTY.withColor(TextColor.parse(ctx.getArgument())))); } else { return PlaceholderResult.value(Text.literal(\"You are a server!\") .setStyle(Style.EMPTY.withColor(TextColor.parse(ctx.getArgument())))); } }); } Pattern pattern = Placeholders.PREDEFINED_PLACEHOLDER_PATTERN; Text output = Placeholders.parseText(inputText, PlaceholderContext.of(player), pattern, placeholders);","title":"Dynamic placeholders"},{"location":"dev/parsing-placeholders/#preferred-patterns-for-static","text":"PlaceholderAPI has few Patterns you can use, which are accessible as static objects on Placeholders class. PREDEFINED_PLACEHOLDER_PATTERN ( ${placeholder} ) - works the best in most cases, doesn't collide with other ones. ALT_PLACEHOLDER_PATTERN_CUSTOM ( {placeholder} ) - second best, but have more chance of colliding with user formatting. There are other ones, which usage is allowed, but they might work worse. PLACEHOLDER_PATTERN_CUSTOM ( %placeholder% ) - is the same as default one, but doesn't require : . PLACEHOLDER_PATTERN ( %category:placeholder% ) - used by default global placeholders (requires category). PLACEHOLDER_PATTERN_ALT ( {category:placeholder} ) - used as alternative formatting for global ones (requires category).","title":"Preferred Patterns for static"},{"location":"dev/text-format/","text":"Using Simplified Text Format/TextParser You can read about format here! Usage of TextParser is simple and really customisable. You just need to import eu.pb4.placeholders.api.TextParserUtils and call static formatText method for admin provided configs or formatTextSafe for player provided ones. They both take only one String argument and output a Text object. Example String inputString = \"<red>Hello <rb>World</rb>!\" Text output = TextParserUtils.parseText(inputString); Parsing with only selected ones If you want to only use selected tags, you can simply get map of all with TextParserV1.DEFAULT.getTags() . Then you just use them with TextParserUtils.parseText(String, TextParserV1.TagParserGetter) .","title":"Using Simplified Text Format/TextParser"},{"location":"dev/text-format/#using-simplified-text-formattextparser","text":"You can read about format here! Usage of TextParser is simple and really customisable. You just need to import eu.pb4.placeholders.api.TextParserUtils and call static formatText method for admin provided configs or formatTextSafe for player provided ones. They both take only one String argument and output a Text object. Example String inputString = \"<red>Hello <rb>World</rb>!\" Text output = TextParserUtils.parseText(inputString);","title":"Using Simplified Text Format/TextParser"},{"location":"dev/text-format/#parsing-with-only-selected-ones","text":"If you want to only use selected tags, you can simply get map of all with TextParserV1.DEFAULT.getTags() . Then you just use them with TextParserUtils.parseText(String, TextParserV1.TagParserGetter) .","title":"Parsing with only selected ones"},{"location":"user/default-placeholders/","text":"Default placeholder list These placeholders are provided by default and are available for every mod using Placeholder API. If placeholder isn't parsed, make sure it is used in correct context, with valid arguments and that you are using the latest version. Before 1.19, arguments were split with / instead of space List of placeholders Server %server:tps% - server's tps %server:tps_colored% - colored server's tps %server:mspt% - server's mspt %server:mspt_colored% - colored server's mspt %server:time% / %server:time [formatting]% - server's time %server:version% - server's version %server:name% - server's name %server:used_ram% / %server:used_ram gb% - amount of ram used by server %server:max_ram% / %server:max_ram gb% - maximal amount of ram, that can be used by server %server:online% - number of online players %server:max_players% - maximal player count %server:mod_version [modid]% - returns version of the mod %server:mod_name [modid]% - returns name of the mod %server:mod_description [modid]% - returns description of the mod World %world:time% - world's time %world:time_alt% - world's time (alternative formatting) %world:day% - world's day %world:player_count% - world's player count %world:mob_count% / %world:mob_count [group]% - Shows amount of spawned mobs %world:mob_cap% / %world:mob_cap [group]% - Shows maximum amount of mobs that can spawn is player's world %world:id% - world's id %world:name% - world's name Player %player:name% - player's name %player:name_visual% - player's name (without hover and click action) %player:name_unformatted% - player's name (without formatting) %player:displayname% - player's display name (used on chat) %player:displayname_visual% - player's display name (without hover and click action) %player:displayname_unformatted% - player's display name (without formatting) %player:ping% - player's ping %player:ping_colored% - colored player's ping %player:pos_x% - player's x coordinate %player:pos_y% - player's y coordinate %player:pos_z% - player's z coordinate %player:health% - player's health %player:max_health% - player's max health %player:hunger% - player's hunger %player:saturation% - player's saturation %player:inventory_slot [slot number]% - item in player's inventory at slot %player:equipment_slot [name]% - player's equipment at selected slot. Valid values for [name] are mainhand , offhand , head , chest , legs and feet %player:playtime% / %player:playtime [formatting]% - player's playtime %player:statistic [statistic]% - value of player's statistic Vanilla statistics: leave_game, play_one_minute, time_since_death, time_since_rest, sneak_time, walk_one_cm, crouch_one_cm, sprint_one_cm, walk_on_water_one_cm, fall_one_cm, climb_one_cm, fly_one_cm, walk_under_water_one_cm, minecart_one_cm, boat_one_cm, pig_one_cm, horse_one_cm, aviate_one_cm, swim_one_cm, strider_one_cm, jump, drop, damage_dealt, damage_dealt_absorbed, damage_dealt_resisted, damage_taken, damage_blocked_by_shield, damage_absorbed, damage_resisted, deaths, mob_kills, animals_bred, player_kills, fish_caught, talked_to_villager, traded_with_villager, eat_cake_slice, fill_cauldron, use_cauldron, clean_armor, clean_banner, clean_shulker_box, interact_with_brewingstand, interact_with_beacon, inspect_dropper, inspect_hopper, inspect_dispenser, play_noteblock, tune_noteblock, pot_flower, trigger_trapped_chest, open_enderchest, enchant_item, play_record, interact_with_furnace, interact_with_crafting_table, open_chest, sleep_in_bed, open_shulker_box, open_barrel, interact_with_blast_furnace, interact_with_smoker, interact_with_lectern, interact_with_campfire, interact_with_cartography_table, interact_with_loom, interact_with_stonecutter, bell_ring, raid_trigger, raid_win, interact_with_anvil, interact_with_grindstone, target_hit, interact_with_smithing_table","title":"Default placeholder list"},{"location":"user/default-placeholders/#default-placeholder-list","text":"These placeholders are provided by default and are available for every mod using Placeholder API. If placeholder isn't parsed, make sure it is used in correct context, with valid arguments and that you are using the latest version. Before 1.19, arguments were split with / instead of space","title":"Default placeholder list"},{"location":"user/default-placeholders/#list-of-placeholders","text":"","title":"List of placeholders"},{"location":"user/default-placeholders/#server","text":"%server:tps% - server's tps %server:tps_colored% - colored server's tps %server:mspt% - server's mspt %server:mspt_colored% - colored server's mspt %server:time% / %server:time [formatting]% - server's time %server:version% - server's version %server:name% - server's name %server:used_ram% / %server:used_ram gb% - amount of ram used by server %server:max_ram% / %server:max_ram gb% - maximal amount of ram, that can be used by server %server:online% - number of online players %server:max_players% - maximal player count %server:mod_version [modid]% - returns version of the mod %server:mod_name [modid]% - returns name of the mod %server:mod_description [modid]% - returns description of the mod","title":"Server"},{"location":"user/default-placeholders/#world","text":"%world:time% - world's time %world:time_alt% - world's time (alternative formatting) %world:day% - world's day %world:player_count% - world's player count %world:mob_count% / %world:mob_count [group]% - Shows amount of spawned mobs %world:mob_cap% / %world:mob_cap [group]% - Shows maximum amount of mobs that can spawn is player's world %world:id% - world's id %world:name% - world's name","title":"World"},{"location":"user/default-placeholders/#player","text":"%player:name% - player's name %player:name_visual% - player's name (without hover and click action) %player:name_unformatted% - player's name (without formatting) %player:displayname% - player's display name (used on chat) %player:displayname_visual% - player's display name (without hover and click action) %player:displayname_unformatted% - player's display name (without formatting) %player:ping% - player's ping %player:ping_colored% - colored player's ping %player:pos_x% - player's x coordinate %player:pos_y% - player's y coordinate %player:pos_z% - player's z coordinate %player:health% - player's health %player:max_health% - player's max health %player:hunger% - player's hunger %player:saturation% - player's saturation %player:inventory_slot [slot number]% - item in player's inventory at slot %player:equipment_slot [name]% - player's equipment at selected slot. Valid values for [name] are mainhand , offhand , head , chest , legs and feet %player:playtime% / %player:playtime [formatting]% - player's playtime %player:statistic [statistic]% - value of player's statistic Vanilla statistics: leave_game, play_one_minute, time_since_death, time_since_rest, sneak_time, walk_one_cm, crouch_one_cm, sprint_one_cm, walk_on_water_one_cm, fall_one_cm, climb_one_cm, fly_one_cm, walk_under_water_one_cm, minecart_one_cm, boat_one_cm, pig_one_cm, horse_one_cm, aviate_one_cm, swim_one_cm, strider_one_cm, jump, drop, damage_dealt, damage_dealt_absorbed, damage_dealt_resisted, damage_taken, damage_blocked_by_shield, damage_absorbed, damage_resisted, deaths, mob_kills, animals_bred, player_kills, fish_caught, talked_to_villager, traded_with_villager, eat_cake_slice, fill_cauldron, use_cauldron, clean_armor, clean_banner, clean_shulker_box, interact_with_brewingstand, interact_with_beacon, inspect_dropper, inspect_hopper, inspect_dispenser, play_noteblock, tune_noteblock, pot_flower, trigger_trapped_chest, open_enderchest, enchant_item, play_record, interact_with_furnace, interact_with_crafting_table, open_chest, sleep_in_bed, open_shulker_box, open_barrel, interact_with_blast_furnace, interact_with_smoker, interact_with_lectern, interact_with_campfire, interact_with_cartography_table, interact_with_loom, interact_with_stonecutter, bell_ring, raid_trigger, raid_win, interact_with_anvil, interact_with_grindstone, target_hit, interact_with_smithing_table","title":"Player"},{"location":"user/general/","text":"Using placeholders Usage of placeholder mostly depends on implementation of mod itself. If mod uses simple, one/multiline text (for example with Simple Text Format) you just need to add it by just writing %placeholder% (or in some cases {placeholder} , ${placeholder} or other format which should be provided on mods page). Inner part of placeholder can take shape of either category:placeholder or category:placeholder argument ( category:placeholder/argument before 1.19), where category is replaced by type ( player , world , etc) or ID of the mod and placeholder is the placeholder itself. Additionally, some placeholders might have additional or required argument provided after first space. It's format fully depend on mod providing it. You can check list of build in placeholders here and placeholders from mods here . List of mods supporting displaying Placeholder API's placeholders: Styled Player List - CurseForge , Modrinth , Github Styled Chat - CurseForge , Modrinth , Github Holograms - CurseForge , Modrinth , Github Player Events - CurseForge , Github Discord4Fabric - CurseForge , Modrinth , Github Are you a mod dev, and your mod is missing? Feel free to create an issue!","title":"Using placeholders"},{"location":"user/general/#using-placeholders","text":"Usage of placeholder mostly depends on implementation of mod itself. If mod uses simple, one/multiline text (for example with Simple Text Format) you just need to add it by just writing %placeholder% (or in some cases {placeholder} , ${placeholder} or other format which should be provided on mods page). Inner part of placeholder can take shape of either category:placeholder or category:placeholder argument ( category:placeholder/argument before 1.19), where category is replaced by type ( player , world , etc) or ID of the mod and placeholder is the placeholder itself. Additionally, some placeholders might have additional or required argument provided after first space. It's format fully depend on mod providing it. You can check list of build in placeholders here and placeholders from mods here .","title":"Using placeholders"},{"location":"user/general/#list-of-mods-supporting-displaying-placeholder-apis-placeholders","text":"Styled Player List - CurseForge , Modrinth , Github Styled Chat - CurseForge , Modrinth , Github Holograms - CurseForge , Modrinth , Github Player Events - CurseForge , Github Discord4Fabric - CurseForge , Modrinth , Github Are you a mod dev, and your mod is missing? Feel free to create an issue!","title":"List of mods supporting displaying Placeholder API's placeholders:"},{"location":"user/mod-placeholders/","text":"Mod placeholders list These placeholders are provided by other mods. Some are build in directly, while others require an addon. Box Of Placeholders is a mod that adds placeholder for other mods. You can download it from https://github.com/Patbox/BoxOfPlaceholders/releases List of placeholders Get Off My Lawn ReServed %goml:claim_owners% / %goml:claim_owners [No owners text]% - Returns list of claim owners %goml:claim_owners_uuid% / %goml:claim_owners_uuid [No owners text]% - Returns list of claim owners (as uuids) %goml:claim_trusted% / %goml:claim_trusted [No trusted text]% - Returns list of trusted players %goml:claim_trusted_uuid% / %goml:claim_trusted_uuid [No trusted text]% - Returns list of trusted players (as uuids) %goml:claim_info% / %goml:claim_info [no claim text] [player can build] [player can't build]% - Returns list of trusted players (variables: ${owners} , ${owners_uuid} , ${trusted} , ${trusted_uuid} , ${anchor} ) Luckperms Requires LuckPerms Fabric PlaceholderAPI addon %luckperms:prefix% - Returns the player's prefix %luckperms:suffix% - Returns the players suffix %luckperms:meta [meta key]% - Returns a single value for the given meta key %luckperms:meta_all [meta key]% - Returns all assigned values for the given meta key %luckperms:prefix_element [element]% - Returns a prefix element using the given \"meta stack\" element definition. See Prefix Stacking %luckperms:suffix_element [element]% - Returns a suffix element using the given \"meta stack\" element definition. See Prefix Stacking %luckperms:context [context key]% - Returns all of the players current contexts. If a key is given as an argument, then only the values corresponding to the given key are returned. %luckperms:groups% - Returns a list of the groups directly inherited by the player. %luckperms:inherited_groups% - Returns a list of all of the groups inherited (directly or indirectly) by the player. %luckperms:primary_group_name% - Returns the name of the player's primary group. %luckperms:has_permission [permission]% - Returns if the player directly has the exact given permission (not the same as a permission check!) %luckperms:inherits_permission [permission]%% - Returns if the player inherits the exact given permission (not the same as a permission check!) %luckperms:check_permission [permission]%% - Returns the result of a permission check for the given permission on the player. %luckperms:in_group [group]% - Returns if the player is directly a member of the given group. %luckperms:inherits_group [group]% - Returns if the player is a direct or indirect member of the given group. %luckperms:on_track [track]% - Returns if the player's \"primary group\" is on this track. (deprecated - avoid relying on primary groups, use the placeholder below instead!) %luckperms:has_groups_on_track [track]% - Returns if any of the groups the player is directly a member of is on the given track. %luckperms:highest_group_by_weight% - Returns the name of the players highest weighted group, not including groups they indirectly inherit from others. %luckperms:lowest_group_by_weight% - Returns the name of the players lowest weighted group, not including groups they indirectly inherit from others. %luckperms:highest_inherited_group_by_weight% - Returns the name of the players highest weighted group, including groups they indirectly inherit from others. %luckperms:lowest_inherited_group_by_weight% - Returns the name of the players lowest weighted group, including groups they indirectly inherit from others. %luckperms:current_group_on_track [track]% - If the player is currently on the given track, returns the name of the group. %luckperms:next_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the next group (the one they would be promoted to next). %luckperms:previous_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the previous group (the one they would be demoted to next). %luckperms:first_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the first group inherited by the player on any of the given tracks. %luckperms:last_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the last group inherited by the player on any of the given tracks. %luckperms:expiry_time [permission]% - Gets the duration remaining on a temporary permission assigned directly to the player. %luckperms:inherited_expiry_time [permission]% - %luckperms_inherited_expiry_time% %luckperms:group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to the player. %luckperms:inherited_group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to or inherited by the player. PlayerEx %playerex:level% - Shows current player level %playerex:level_top_X% - Shows player at X place (from 1 to 10, for example %playerex:level_top_1% ) Player Pronouns %playerpronouns:pronouns% / %playerpronouns:pronouns [default value]% - Displays formatted player's pronouns %playerpronouns:raw_pronouns% / %playerpronouns:raw_pronouns [default value]% - Displays formatted player's pronouns Spark %spark:tps% / %spark:tps/duration% - Shows server TPS. duration can be 5s, 10s, 1m, 5m, 15m . Shows all durations if left out %spark:tickduration% / %spark:tickduration/duration% - Shows the average tick durations. duration can be 10s, 1m . Shows all durations if left out %spark:cpu_system% / %spark:cpu_system/duration% - Shows the average CPU usage for the whole system. duration can be 10s, 1m, 15m . Shows all durations if left out %spark:cpu_process% / %spark:cpu_process/duration% - Shows the average CPU usage for the server process. duration can be 10s, 1m, 15m . Shows all durations if left out Styled Nicknames %styled-nicknames:display_name% - Either nickname or default player name (skips other formatting mods) Vanish %vanish:vanished% - Displays a text (configurable via config) if a player is vanished %vanish:online% - The amount of players that the player viewing the placeholder can see","title":"Mod placeholders list"},{"location":"user/mod-placeholders/#mod-placeholders-list","text":"These placeholders are provided by other mods. Some are build in directly, while others require an addon. Box Of Placeholders is a mod that adds placeholder for other mods. You can download it from https://github.com/Patbox/BoxOfPlaceholders/releases","title":"Mod placeholders list"},{"location":"user/mod-placeholders/#list-of-placeholders","text":"","title":"List of placeholders"},{"location":"user/mod-placeholders/#get-off-my-lawn-reserved","text":"%goml:claim_owners% / %goml:claim_owners [No owners text]% - Returns list of claim owners %goml:claim_owners_uuid% / %goml:claim_owners_uuid [No owners text]% - Returns list of claim owners (as uuids) %goml:claim_trusted% / %goml:claim_trusted [No trusted text]% - Returns list of trusted players %goml:claim_trusted_uuid% / %goml:claim_trusted_uuid [No trusted text]% - Returns list of trusted players (as uuids) %goml:claim_info% / %goml:claim_info [no claim text] [player can build] [player can't build]% - Returns list of trusted players (variables: ${owners} , ${owners_uuid} , ${trusted} , ${trusted_uuid} , ${anchor} )","title":"Get Off My Lawn ReServed"},{"location":"user/mod-placeholders/#luckperms","text":"Requires LuckPerms Fabric PlaceholderAPI addon %luckperms:prefix% - Returns the player's prefix %luckperms:suffix% - Returns the players suffix %luckperms:meta [meta key]% - Returns a single value for the given meta key %luckperms:meta_all [meta key]% - Returns all assigned values for the given meta key %luckperms:prefix_element [element]% - Returns a prefix element using the given \"meta stack\" element definition. See Prefix Stacking %luckperms:suffix_element [element]% - Returns a suffix element using the given \"meta stack\" element definition. See Prefix Stacking %luckperms:context [context key]% - Returns all of the players current contexts. If a key is given as an argument, then only the values corresponding to the given key are returned. %luckperms:groups% - Returns a list of the groups directly inherited by the player. %luckperms:inherited_groups% - Returns a list of all of the groups inherited (directly or indirectly) by the player. %luckperms:primary_group_name% - Returns the name of the player's primary group. %luckperms:has_permission [permission]% - Returns if the player directly has the exact given permission (not the same as a permission check!) %luckperms:inherits_permission [permission]%% - Returns if the player inherits the exact given permission (not the same as a permission check!) %luckperms:check_permission [permission]%% - Returns the result of a permission check for the given permission on the player. %luckperms:in_group [group]% - Returns if the player is directly a member of the given group. %luckperms:inherits_group [group]% - Returns if the player is a direct or indirect member of the given group. %luckperms:on_track [track]% - Returns if the player's \"primary group\" is on this track. (deprecated - avoid relying on primary groups, use the placeholder below instead!) %luckperms:has_groups_on_track [track]% - Returns if any of the groups the player is directly a member of is on the given track. %luckperms:highest_group_by_weight% - Returns the name of the players highest weighted group, not including groups they indirectly inherit from others. %luckperms:lowest_group_by_weight% - Returns the name of the players lowest weighted group, not including groups they indirectly inherit from others. %luckperms:highest_inherited_group_by_weight% - Returns the name of the players highest weighted group, including groups they indirectly inherit from others. %luckperms:lowest_inherited_group_by_weight% - Returns the name of the players lowest weighted group, including groups they indirectly inherit from others. %luckperms:current_group_on_track [track]% - If the player is currently on the given track, returns the name of the group. %luckperms:next_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the next group (the one they would be promoted to next). %luckperms:previous_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the previous group (the one they would be demoted to next). %luckperms:first_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the first group inherited by the player on any of the given tracks. %luckperms:last_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the last group inherited by the player on any of the given tracks. %luckperms:expiry_time [permission]% - Gets the duration remaining on a temporary permission assigned directly to the player. %luckperms:inherited_expiry_time [permission]% - %luckperms_inherited_expiry_time% %luckperms:group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to the player. %luckperms:inherited_group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to or inherited by the player.","title":"Luckperms"},{"location":"user/mod-placeholders/#playerex","text":"%playerex:level% - Shows current player level %playerex:level_top_X% - Shows player at X place (from 1 to 10, for example %playerex:level_top_1% )","title":"PlayerEx"},{"location":"user/mod-placeholders/#player-pronouns","text":"%playerpronouns:pronouns% / %playerpronouns:pronouns [default value]% - Displays formatted player's pronouns %playerpronouns:raw_pronouns% / %playerpronouns:raw_pronouns [default value]% - Displays formatted player's pronouns","title":"Player Pronouns"},{"location":"user/mod-placeholders/#spark","text":"%spark:tps% / %spark:tps/duration% - Shows server TPS. duration can be 5s, 10s, 1m, 5m, 15m . Shows all durations if left out %spark:tickduration% / %spark:tickduration/duration% - Shows the average tick durations. duration can be 10s, 1m . Shows all durations if left out %spark:cpu_system% / %spark:cpu_system/duration% - Shows the average CPU usage for the whole system. duration can be 10s, 1m, 15m . Shows all durations if left out %spark:cpu_process% / %spark:cpu_process/duration% - Shows the average CPU usage for the server process. duration can be 10s, 1m, 15m . Shows all durations if left out","title":"Spark"},{"location":"user/mod-placeholders/#styled-nicknames","text":"%styled-nicknames:display_name% - Either nickname or default player name (skips other formatting mods)","title":"Styled Nicknames"},{"location":"user/mod-placeholders/#vanish","text":"%vanish:vanished% - Displays a text (configurable via config) if a player is vanished %vanish:online% - The amount of players that the player viewing the placeholder can see","title":"Vanish"},{"location":"user/text-format/","text":"Simplified Text Format It's a simple, string format inspired by formats like HTML or MiniMessage. It was created to allow quick and readable way of formatting Minecraft Text Components while still providing all of its functionality as opposed for legacy &/\u00a7 formatting used by bukkit and bukkit-based plugins. Structure Formatting is build on concept of tags. Most of them come in pairs of a starting ( <tag> ) and closing one ( </tag> ). While closing ones are technically optional, without them formatting will continue until end of an input text or special <reset> tag. Some tags support arguments, which can be passed by adding : after tag name in starting one (for example <color:#FF3333> </color> ). Arguments containing symbols like : , < , > , % and spaces should be wrapped in a ' symbols (for example <hover:show_text:'<red>Hello!'>... ). In case you want to type <tag> as plain text, you need to prefix it with \\ symbol . Few examples: <color:#11dddd>%player:displayname%</color> <dark_gray>\u00bb</dark_gray> <color:#cccccc>${message} <red>Hello <blue>world</blue>!</red> <rainbow>Some colors for you There are also few self-contained tags, that don't require closing ones. They can also take arguments in the same way to previous ones. Few examples: <lang:'item.minecraft.diamond'> <reset> List of available tags Here is list of all default tags available. Other mods can add new or limit usage of existing ones, so not every might work in yours case. Colors By default, there are multiple tags representing colors. They use their vanilla name or (additional aliases). This tag should be closed. The current list includes: <yellow> , <dark_blue> , <dark_purple> , <gold> , <red> , <aqua> , <gray> , <light_purple> , <white> , <dark_gray> , <green> , <dark_green> , <blue> , <dark_aqua> , <dark_green> , <black> There is also a universal <color:[value]> and <c:[value]> tags, in which you can replace [value] with vanilla color name or a rgb color starting with # (for example <color:#AABBCC> ) Decorations These tags allow decorating text, they are quite simple. This tag should be closed. <strikethrough> / <st> - Makes text strikethrough, <underline> - Underlines text, <italic> / <i> - Makes text italic, <obfuscated> / <obf> - Obfuscates text (matrix effect), <bold> / <b> - Makes text bold, Click events Click events allow making text more interactive. They should be however limited to admin usage only, as they can do harm if accessible by normal players. This tag should be closed. There are few available actions: <click:open_url:[value]> / <open_url:[value]> / <url:[value]> - Opens provided url <click:run_command:[value]> / <run_cmd:[value]> - Runs command as player <click:suggest_command:[value]> / <suggest_command:[value]> / <cmd:[value]> - Suggests command to player <click:copy_to_clipboard:[value]> / <copy_to_clipboard:[value]> / <copy:[value]> - Copies text to clipboard <click:change_page:[value]> / <change_page:[value]> / <page:[value]> - Changes page in a book [value] needs to be replaced with targeted value, for example 'gamemode creative' Hover Hover tag allows adding simple hover on text. It can be used to display additional information. This tag should be closed. <hover:show_text:[value]> / <hover:[value]> - Adds simple text hover ( [value] uses the same formatting as rest) <hover:show_item:[value]> - Adds simple ItemStack hover ( [value] is item in sNBT format) <hover:show_entity:[type]:[UUID]:'Display Name'> - Adds entity hover ( : in entity type needs to be replaced with \\: ) Fonts This tag allows you to change font to any build in one or one provided by resource pack. You can use it by simply adding <font:[value]> , where [value] is just a font name. Minecraft has 3 build-in fonts: default , uniform and alt . This tag should be closed. Inserting This tag creates a clickable text, that inserts its value at the end of player's chat message. You can use it by writing <insert:[value]> , where [value] inserted text (should be wrapped in ' ). This tag should be closed. Translations Translations tag allows you to insert a text from a lang file (including ones parsed on servers by some mods). You use it with <lang:[key]:[optional arg 1]:[optional arg 1]:...> , where [key] is a translation key and [optional arg X] are optional, fully formatted arguments you can pass. This tag is self containing, so it doesn't contain a closing tag. Control keys This tag allows you to add information about player control keys, with respecting of theirs configuration. You can use it with <keybind:[value]> , where [value] is a control key used, which you can hind here . This tag is self containing, so it doesn't contain a closing tag. Gradients This tag allows you to add gradients to the text. However, it has multiple limitation that can block its usage. Currently, you can't use dynamic values (translations, control keys, placeholders, etc) within them, as they require static text. There 2 types of gradients: <gradient:[color 1]:[color 2]:...> / <gr:[color 1]:[color 2]:...> - I can take multiple colors to move between them smoothly. <hard_gradient:[color 1]:[color 2]:...> / <hgr:[color 1]:[color 2]:...> - I can take multiple colors to move between them without mixing them. <rainbow:[frequency]:[saturation]:[offset]> / <rb:[...]> - It's simple rainbow gradient. All arguments are optional ( <ranbow> is still valid) and they take numbers between 0 and 1 ( 0.3 for example) Reset <reset> and <r> are special, self-contained tags which close all previous formatting. They are useful in cases, where you want to close multiple formatting tags quickly","title":"Simplified Text Format"},{"location":"user/text-format/#simplified-text-format","text":"It's a simple, string format inspired by formats like HTML or MiniMessage. It was created to allow quick and readable way of formatting Minecraft Text Components while still providing all of its functionality as opposed for legacy &/\u00a7 formatting used by bukkit and bukkit-based plugins.","title":"Simplified Text Format"},{"location":"user/text-format/#structure","text":"Formatting is build on concept of tags. Most of them come in pairs of a starting ( <tag> ) and closing one ( </tag> ). While closing ones are technically optional, without them formatting will continue until end of an input text or special <reset> tag. Some tags support arguments, which can be passed by adding : after tag name in starting one (for example <color:#FF3333> </color> ). Arguments containing symbols like : , < , > , % and spaces should be wrapped in a ' symbols (for example <hover:show_text:'<red>Hello!'>... ). In case you want to type <tag> as plain text, you need to prefix it with \\ symbol . Few examples: <color:#11dddd>%player:displayname%</color> <dark_gray>\u00bb</dark_gray> <color:#cccccc>${message} <red>Hello <blue>world</blue>!</red> <rainbow>Some colors for you There are also few self-contained tags, that don't require closing ones. They can also take arguments in the same way to previous ones. Few examples: <lang:'item.minecraft.diamond'> <reset>","title":"Structure"},{"location":"user/text-format/#list-of-available-tags","text":"Here is list of all default tags available. Other mods can add new or limit usage of existing ones, so not every might work in yours case.","title":"List of available tags"},{"location":"user/text-format/#colors","text":"By default, there are multiple tags representing colors. They use their vanilla name or (additional aliases). This tag should be closed. The current list includes: <yellow> , <dark_blue> , <dark_purple> , <gold> , <red> , <aqua> , <gray> , <light_purple> , <white> , <dark_gray> , <green> , <dark_green> , <blue> , <dark_aqua> , <dark_green> , <black> There is also a universal <color:[value]> and <c:[value]> tags, in which you can replace [value] with vanilla color name or a rgb color starting with # (for example <color:#AABBCC> )","title":"Colors"},{"location":"user/text-format/#decorations","text":"These tags allow decorating text, they are quite simple. This tag should be closed. <strikethrough> / <st> - Makes text strikethrough, <underline> - Underlines text, <italic> / <i> - Makes text italic, <obfuscated> / <obf> - Obfuscates text (matrix effect), <bold> / <b> - Makes text bold,","title":"Decorations"},{"location":"user/text-format/#click-events","text":"Click events allow making text more interactive. They should be however limited to admin usage only, as they can do harm if accessible by normal players. This tag should be closed. There are few available actions: <click:open_url:[value]> / <open_url:[value]> / <url:[value]> - Opens provided url <click:run_command:[value]> / <run_cmd:[value]> - Runs command as player <click:suggest_command:[value]> / <suggest_command:[value]> / <cmd:[value]> - Suggests command to player <click:copy_to_clipboard:[value]> / <copy_to_clipboard:[value]> / <copy:[value]> - Copies text to clipboard <click:change_page:[value]> / <change_page:[value]> / <page:[value]> - Changes page in a book [value] needs to be replaced with targeted value, for example 'gamemode creative'","title":"Click events"},{"location":"user/text-format/#hover","text":"Hover tag allows adding simple hover on text. It can be used to display additional information. This tag should be closed. <hover:show_text:[value]> / <hover:[value]> - Adds simple text hover ( [value] uses the same formatting as rest) <hover:show_item:[value]> - Adds simple ItemStack hover ( [value] is item in sNBT format) <hover:show_entity:[type]:[UUID]:'Display Name'> - Adds entity hover ( : in entity type needs to be replaced with \\: )","title":"Hover"},{"location":"user/text-format/#fonts","text":"This tag allows you to change font to any build in one or one provided by resource pack. You can use it by simply adding <font:[value]> , where [value] is just a font name. Minecraft has 3 build-in fonts: default , uniform and alt . This tag should be closed.","title":"Fonts"},{"location":"user/text-format/#inserting","text":"This tag creates a clickable text, that inserts its value at the end of player's chat message. You can use it by writing <insert:[value]> , where [value] inserted text (should be wrapped in ' ). This tag should be closed.","title":"Inserting"},{"location":"user/text-format/#translations","text":"Translations tag allows you to insert a text from a lang file (including ones parsed on servers by some mods). You use it with <lang:[key]:[optional arg 1]:[optional arg 1]:...> , where [key] is a translation key and [optional arg X] are optional, fully formatted arguments you can pass. This tag is self containing, so it doesn't contain a closing tag.","title":"Translations"},{"location":"user/text-format/#control-keys","text":"This tag allows you to add information about player control keys, with respecting of theirs configuration. You can use it with <keybind:[value]> , where [value] is a control key used, which you can hind here . This tag is self containing, so it doesn't contain a closing tag.","title":"Control keys"},{"location":"user/text-format/#gradients","text":"This tag allows you to add gradients to the text. However, it has multiple limitation that can block its usage. Currently, you can't use dynamic values (translations, control keys, placeholders, etc) within them, as they require static text. There 2 types of gradients: <gradient:[color 1]:[color 2]:...> / <gr:[color 1]:[color 2]:...> - I can take multiple colors to move between them smoothly. <hard_gradient:[color 1]:[color 2]:...> / <hgr:[color 1]:[color 2]:...> - I can take multiple colors to move between them without mixing them. <rainbow:[frequency]:[saturation]:[offset]> / <rb:[...]> - It's simple rainbow gradient. All arguments are optional ( <ranbow> is still valid) and they take numbers between 0 and 1 ( 0.3 for example)","title":"Gradients"},{"location":"user/text-format/#reset","text":"<reset> and <r> are special, self-contained tags which close all previous formatting. They are useful in cases, where you want to close multiple formatting tags quickly","title":"Reset"}]}